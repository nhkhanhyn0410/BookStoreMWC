@model BookStoreMVC.Models.ViewModels.BookViewModel

<div class="book-card h-100">
    <div class="card h-100 shadow-sm border-0 book-item" data-book-id="@Model.Id">
        <!-- Image Container with Badges -->
        <div class="book-image-container position-relative">
            <a href="@Url.Action("Details", "Books", new { id = Model.Id })" class="d-block">
                <img src="@Model.DefaultImageUrl" class="card-img-top book-cover" alt="@Model.ImageAlt" loading="lazy"
                    @* onerror="this.src='/images/books/default-book-cover.jpg'"> *@
         </a>

                <!-- Status Badges -->
                <div class="book-badges position-absolute">
                    @if (Model.HasDiscount)
                    {
                        <span class="badge bg-danger sale-badge">
                            <i class="fas fa-percent me-1"></i>@Model.DiscountPercentage% OFF
                        </span>
                    }

                    @if (!Model.InStock)
                    {
                        <span class="badge bg-secondary out-of-stock-badge">
                            <i class="fas fa-times me-1"></i>Out of Stock
                        </span>
                    }
                    else if (Model.StockQuantity <= 5)
                    {
                        <span class="badge bg-warning low-stock-badge">
                            <i class="fas fa-exclamation me-1"></i>Low Stock
                        </span>
                    }

                    @* Check if book is new (published in last 30 days) *@
                    @if (Model.PublishDate.HasValue && Model.PublishDate.Value >= DateTime.Now.AddDays(-30))
                    {
                        <span class="badge bg-success new-badge">
                            <i class="fas fa-star me-1"></i>New
                        </span>
                    }
                </div>

                <!-- Wishlist Button -->
                <div class="book-actions position-absolute">
                    <button type="button" class="btn btn-outline-light btn-sm wishlist-btn rounded-circle"
                        data-book-id="@Model.Id" title="Add to Wishlist" aria-label="Add to Wishlist">
                        <i class="far fa-heart"></i>
                    </button>

                    <button type="button" class="btn btn-outline-light btn-sm quick-view-btn rounded-circle"
                        data-book-id="@Model.Id" title="Quick View" aria-label="Quick View" data-bs-toggle="modal"
                        data-bs-target="#quickViewModal">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
        </div>

        <!-- Card Body -->
        <div class="card-body d-flex flex-column">
            <!-- Category -->
            @if (Model.Category != null)
            {
                <div class="book-category mb-2">
                    <a href="@Url.Action("Category", "Books", new { categoryId = Model.CategoryId })"
                        class="text-decoration-none">
                        <span class="badge bg-light text-primary category-badge">
                            @Model.Category.Name
                        </span>
                    </a>
                </div>
            }

            <!-- Title -->
            <h5 class="card-title book-title mb-2">
                <a href="@Url.Action("Details", "Books", new { id = Model.Id })"
                    class="text-decoration-none text-dark book-title-link">
                    @Model.Title
                </a>
            </h5>

            <!-- Author -->
            <p class="card-text book-author text-muted mb-2">
                <i class="fas fa-user me-1"></i>
                <small>by @Model.Author</small>
            </p>

            <!-- Rating and Reviews -->
            <div class="book-rating mb-2">
                <div class="d-flex align-items-center">
                    <div class="stars me-2">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Floor(Model.AverageRating))
                            {
                                <i class="fas fa-star text-warning"></i>
                            }
                            else if (i == Math.Ceiling(Model.AverageRating) && Model.AverageRating % 1 != 0)
                            {
                                <i class="fas fa-star-half-alt text-warning"></i>
                            }
                            else
                            {
                                <i class="far fa-star text-muted"></i>
                            }
                        }
                    </div>
                    <small class="text-muted">
                        @if (Model.ReviewCount > 0)
                        {
                            <span>(@Model.ReviewCount @(Model.ReviewCount == 1 ? "review" : "reviews"))</span>
                        }
                        else
                        {
                            <span>(No reviews yet)</span>
                        }
                    </small>
                </div>
                @if (Model.AverageRating > 0)
                {
                    <small class="text-muted d-block">@Model.AverageRating.ToString("F1") out of 5</small>
                }
            </div>

            <!-- Book Details -->
            <div class="book-details mb-3">
                @if (Model.Publisher != null)
                {
                    <small class="text-muted d-block">
                        <i class="fas fa-building me-1"></i>@Model.Publisher
                    </small>
                }
                @if (Model.PublishDate.HasValue)
                {
                    <small class="text-muted d-block">
                        <i class="fas fa-calendar me-1"></i>@Model.PublishDate.Value.ToString("MMM yyyy")
                    </small>
                }
                @if (Model.PageCount.HasValue)
                {
                    <small class="text-muted d-block">
                        <i class="fas fa-file-alt me-1"></i>@Model.PageCount pages
                    </small>
                }
            </div>

            <!-- Price Section -->
            <div class="book-price mb-3 mt-auto">
                <div class="d-flex align-items-baseline">
                    @if (Model.HasDiscount)
                    {
                        <span class="price-current fw-bold text-primary fs-5 me-2">
                            $@Model.DiscountPrice.Value.ToString("F2")
                        </span>
                        <span class="price-original text-muted text-decoration-line-through">
                            $@Model.Price.ToString("F2")
                        </span>
                    }
                    else
                    {
                        <span class="price-current fw-bold text-primary fs-5">
                            $@Model.Price.ToString("F2")
                        </span>
                    }
                </div>

                @if (Model.HasDiscount)
                {
                    <small class="text-success d-block">
                        <i class="fas fa-tag me-1"></i>
                        You save $@((Model.Price - Model.DiscountPrice.Value).ToString("F2"))
                    </small>
                }
            </div>

            <!-- Stock Status -->
            <div class="stock-status mb-3">
                @if (Model.InStock)
                {
                    if (Model.StockQuantity <= 5)
                    {
                        <small class="text-warning">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            Only @Model.StockQuantity left in stock
                        </small>
                    }
                    else if (Model.StockQuantity <= 10)
                    {
                        <small class="text-info">
                            <i class="fas fa-check-circle me-1"></i>
                            @Model.StockQuantity in stock
                        </small>
                    }
                    else
                    {
                        <small class="text-success">
                            <i class="fas fa-check-circle me-1"></i>
                            In Stock
                        </small>
                    }
                }
                else
                {
                    <small class="text-danger">
                        <i class="fas fa-times-circle me-1"></i>
                        Out of Stock
                    </small>
                }
            </div>
        </div>

        <!-- Card Footer with Actions -->
        <div class="card-footer bg-transparent border-0 pt-0">
            <div class="d-grid gap-2">
                @if (Model.InStock)
                {
                    <!-- Add to Cart Button -->
                    <button type="button" class="btn btn-primary add-to-cart-btn" data-book-id="@Model.Id"
                        data-book-title="@Model.Title" data-book-price="@Model.DisplayPrice">
                        <i class="fas fa-shopping-cart me-2"></i>Add to Cart
                    </button>

                    <!-- Quick Actions -->
                    <div class="btn-group" role="group" aria-label="Quick actions">
                        <button type="button" class="btn btn-outline-secondary btn-sm buy-now-btn flex-fill"
                            data-book-id="@Model.Id">
                            <i class="fas fa-bolt me-1"></i>Buy Now
                        </button>

                        <button type="button" class="btn btn-outline-info btn-sm add-to-wishlist-btn"
                            data-book-id="@Model.Id" title="Add to Wishlist">
                            <i class="far fa-heart"></i>
                        </button>

                        <button type="button" class="btn btn-outline-success btn-sm compare-btn" data-book-id="@Model.Id"
                            title="Add to Compare">
                            <i class="fas fa-balance-scale"></i>
                        </button>
                    </div>
                }
                else
                {
                    <!-- Out of Stock Actions -->
                    <button type="button" class="btn btn-outline-secondary disabled" disabled>
                        <i class="fas fa-times me-2"></i>Out of Stock
                    </button>

                    <button type="button" class="btn btn-outline-info btn-sm notify-when-available"
                        data-book-id="@Model.Id">
                        <i class="fas fa-bell me-2"></i>Notify When Available
                    </button>
                }
            </div>
        </div>

        <!-- Loading Overlay -->
        <div
            class="card-loading-overlay position-absolute w-100 h-100 d-none align-items-center justify-content-center bg-white bg-opacity-75">
            <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Add to Cart functionality
            $(document).on('click', '.add-to-cart-btn', function () {
                var btn = $(this);
                var bookId = btn.data('book-id');
                var bookTitle = btn.data('book-title');
                var bookPrice = btn.data('book-price');

                btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Adding...');

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: {
                        bookId: bookId,
                        quantity: 1
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            showToast(`${bookTitle} added to cart!`, 'success');
                            updateCartCount();
                            btn.html('<i class="fas fa-check me-2"></i>Added!').removeClass('btn-primary').addClass('btn-success');

                            setTimeout(function () {
                                btn.html('<i class="fas fa-shopping-cart me-2"></i>Add to Cart').removeClass('btn-success').addClass('btn-primary').prop('disabled', false);
                            }, 2000);
                        } else {
                            showToast(response.message || 'Error adding to cart', 'error');
                            btn.prop('disabled', false).html('<i class="fas fa-shopping-cart me-2"></i>Add to Cart');
                        }
                    },
                    error: function () {
                        showToast('Error adding to cart', 'error');
                        btn.prop('disabled', false).html('<i class="fas fa-shopping-cart me-2"></i>Add to Cart');
                    }
                });
            });

            // Add to Wishlist functionality
            $(document).on('click', '.add-to-wishlist-btn, .wishlist-btn', function () {
                var btn = $(this);
                var bookId = btn.data('book-id');

                $.ajax({
                    url: '@Url.Action("AddToWishlist", "Wishlist")',
                    type: 'POST',
                    data: { bookId: bookId },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            showToast(response.message, 'success');
                            btn.find('i').removeClass('far').addClass('fas').addClass('text-danger');
                        } else {
                            showToast(response.message || 'Error adding to wishlist', 'error');
                        }
                    },
                    error: function () {
                        showToast('Error adding to wishlist', 'error');
                    }
                });
            });

            // Buy Now functionality
            $(document).on('click', '.buy-now-btn', function () {
                var bookId = $(this).data('book-id');

                // Add to cart first, then redirect to checkout
                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: {
                        bookId: bookId,
                        quantity: 1
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            window.location.href = '@Url.Action("Checkout", "Cart")';
                        } else {
                            showToast(response.message || 'Error processing request', 'error');
                        }
                    },
                    error: function () {
                        showToast('Error processing request', 'error');
                    }
                });
            });

            // Notify When Available
            $(document).on('click', '.notify-when-available', function () {
                var bookId = $(this).data('book-id');

                // This would typically open a modal for email subscription
                showToast('You will be notified when this book becomes available!', 'info');
            });

            // Card hover effects
            $('.book-card .card').hover(
                function () {
                    $(this).addClass('shadow-lg').css('transform', 'translateY(-5px)');
                },
                function () {
                    $(this).removeClass('shadow-lg').css('transform', 'translateY(0)');
                }
            );

            // Image lazy loading fallback
            $('.book-cover').each(function () {
                var img = $(this);
                img.on('error', function () {
                    img.attr('src', '/images/books/default-book-cover.jpg');
                });
            });
        });

        // Helper functions
        function showToast(message, type = 'info') {
            // This would integrate with your toast notification system
            if (typeof toastr !== 'undefined') {
                toastr[type](message);
            } else {
                alert(message);
            }
        }

        function updateCartCount() {
            // Update cart count in header
            $.get('@Url.Action("GetCartCount", "Cart")', function (count) {
                $('.cart-count').text(count);
            });
        }
    </script>
}

@* <style>
    

    @@media (max-width: 576px) {
        .book-cover {
            height: 200px;
        }

        .book-title {
            font-size: 1rem;
            height: 2.4rem;
        }

        .book-actions .btn {
            width: 30px;
            height: 30px;
        }
    }
</style> *@