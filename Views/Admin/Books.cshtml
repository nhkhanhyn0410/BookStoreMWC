@* Views/Admin/Books.cshtml *@
@model BookStoreMVC.Models.ViewModels.BookListViewModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Quản lý sách";
    ViewBag.PageTitle = "Quản lý sách";
    ViewBag.ActiveMenu = "Books";
}

<!-- Page Header with Actions -->
<div class="mb-6">
    <div class="sm:flex sm:items-center sm:justify-between">
        <div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">
                <i class="fas fa-books text-primary-600 mr-3"></i>
                Quản lý sách
            </h2>
            <p class="text-sm text-gray-600">
                Tổng cộng: <span class="font-semibold text-primary-600">@(Model?.TotalCount ?? 0)</span> cuốn sách
            </p>
        </div>
        <div class="mt-4 sm:mt-0 flex gap-3">
            <a href="@Url.Action("ImportBooks", "Admin", new { area = "Admin" })" 
               class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                <i class="fas fa-upload mr-2"></i>
                Import sách
            </a>
            <a href="@Url.Action("CreateBook", "Admin", new { area = "Admin" })" 
               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors shadow-sm">
                <i class="fas fa-plus mr-2"></i>
                Thêm sách mới
            </a>
        </div>
    </div>
</div>

<!-- Quick Stats -->
<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
            <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                <i class="fas fa-book text-xl"></i>
            </div>
            <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Tổng sách</p>
                <p class="text-2xl font-bold text-gray-900">@(Model?.TotalCount ?? 0)</p>
            </div>
        </div>
    </div>
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
            <div class="p-3 rounded-full bg-green-100 text-green-600">
                <i class="fas fa-check-circle text-xl"></i>
            </div>
            <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Còn hàng</p>
                <p class="text-2xl font-bold text-gray-900">@(ViewBag.InStockCount ?? 0)</p>
            </div>
        </div>
    </div>
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
            <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                <i class="fas fa-exclamation-triangle text-xl"></i>
            </div>
            <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Sắp hết</p>
                <p class="text-2xl font-bold text-gray-900">@(ViewBag.LowStockCount ?? 0)</p>
            </div>
        </div>
    </div>
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center">
            <div class="p-3 rounded-full bg-red-100 text-red-600">
                <i class="fas fa-times-circle text-xl"></i>
            </div>
            <div class="ml-4">
                <p class="text-sm font-medium text-gray-600">Hết hàng</p>
                <p class="text-2xl font-bold text-gray-900">@(ViewBag.OutOfStockCount ?? 0)</p>
            </div>
        </div>
    </div>
</div>

<!-- Search and Filter Section -->
<div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
    <div class="p-6">
        <form method="get" id="search-form" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
                <!-- Search Input -->
                <div class="md:col-span-2">
                    <label for="SearchTerm" class="block text-sm font-medium text-gray-700 mb-1">
                        <i class="fas fa-search mr-1"></i>Tìm kiếm
                    </label>
                    <div class="relative">
                        <input type="text" id="SearchTerm" name="SearchTerm" value="@Model.SearchTerm"
                               placeholder="Tên sách, tác giả, ISBN..."
                               class="block w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400 text-sm"></i>
                        </div>
                    </div>
                </div>

                <!-- Category Filter -->
                <div>
                    <label for="CategoryId" class="block text-sm font-medium text-gray-700 mb-1">
                        <i class="fas fa-tags mr-1"></i>Danh mục
                    </label>
                    <select id="CategoryId" name="CategoryId" 
                            class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                        <option value="">Tất cả</option>
                        @* @if (Model?.Categories != null)
                        {
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Id" @(Model.CategoryId == category.Id ? "selected" : "")>
                                    @category.Name
                                </option>
                            }
                        } *@
                    </select>
                </div>

                <!-- Price Range -->
                <div>
                    <label for="MinPrice" class="block text-sm font-medium text-gray-700 mb-1">
                        <i class="fas fa-dollar-sign mr-1"></i>Giá từ
                    </label>
                    <input type="number" id="MinPrice" name="MinPrice" value="@Model.MinPrice" 
                           placeholder="0" min="0" step="1000"
                           class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                </div>

                <div>
                    <label for="MaxPrice" class="block text-sm font-medium text-gray-700 mb-1">
                        <i class="fas fa-dollar-sign mr-1"></i>Đến
                    </label>
                    <input type="number" id="MaxPrice" name="MaxPrice" value="@Model.MaxPrice" 
                           placeholder="999999" min="0" step="1000"
                           class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                </div>

                <!-- Sort By -->
                <div>
                    <label for="SortBy" class="block text-sm font-medium text-gray-700 mb-1">
                        <i class="fas fa-sort mr-1"></i>Sắp xếp
                    </label>
                    <select id="SortBy" name="SortBy" 
                            class="block w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors">
                                <option value="title" selected="@(Model.SortBy == "title")">Tên A-Z</option>
                                <option value="title_desc" selected="@(Model.SortBy == "title_desc")">Tên Z-A</option>
                                <option value="price" selected="@(Model.SortBy == "price")">Giá thấp - cao</option>
                                <option value="price_desc" selected="@(Model.SortBy == "price_desc")">Giá cao - thấp</option>
                                <option value="created" selected="@(Model.SortBy == "created")">Mới nhất</option>
                                <option value="created_desc" selected="@(Model.SortBy == "created_desc")">Cũ nhất</option>
                                <option value="stock" selected="@(Model.SortBy == "stock")">Tồn kho</option>
                    </select>
                </div>
            </div>

            <div class="flex items-center justify-between pt-4">
                <div class="flex items-center gap-4">
                    <button type="submit" 
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                        <i class="fas fa-search mr-2"></i>
                        Tìm kiếm
                    </button>
                    <a href="@Url.Action("Books", "Admin")" 
                       class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                        <i class="fas fa-times mr-2"></i>
                        Xóa bộ lọc
                    </a>
                </div>
                <div class="flex items-center gap-2 text-sm text-gray-600">
                    <span>Hiển thị:</span>
                    <select asp-for="PageSize" asp-items="@(new SelectList(new[]{10,25,50,100}, Model.PageSize))"
        onchange="this.form.submit()" 
        class="border border-gray-300 rounded px-2 py-1 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
</select>

                </div>
            </div>
        </form>
    </div>
</div>

<!-- Books Table / Cards -->
<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
    @if (Model?.Books != null && Model.Books.Any())
    {
        <!-- Table Header -->
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">Danh sách sách</h3>
                <div class="flex items-center gap-4">
                    <!-- View Mode Toggle -->
                    <div class="flex items-center gap-2">
                        <span class="text-sm text-gray-600">Xem:</span>
                        <div class="flex rounded-lg border border-gray-300 overflow-hidden">
                            <button type="button" onclick="switchViewMode('grid')" 
                                    class="view-mode-btn px-3 py-1 text-sm font-medium transition-colors @(Model.ViewMode == "grid" ? "bg-primary-100 text-primary-700" : "bg-white text-gray-700 hover:bg-gray-50")" 
                                    data-mode="grid" title="Xem dạng lưới">
                                <i class="fas fa-th mr-1"></i>
                                Lưới
                            </button>
                            <button type="button" onclick="switchViewMode('list')"
                                    class="view-mode-btn px-3 py-1 text-sm font-medium transition-colors @(Model.ViewMode == "list" ? "bg-primary-100 text-primary-700" : "bg-white text-gray-700 hover:bg-gray-50")"
                                    data-mode="list" title="Xem dạng danh sách">
                                <i class="fas fa-list mr-1"></i>
                                Danh sách
                            </button>
                        </div>
                    </div>
                    
                    <!-- Bulk Action Button -->
                    <button type="button" id="bulk-action-btn" class="hidden inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <i class="fas fa-cog mr-2"></i>
                        Thao tác hàng loạt
                    </button>
                    
                    <!-- Select All -->
                    <div class="flex items-center">
                        <label class="inline-flex items-center">
                            <input type="checkbox" id="select-all" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500">
                            <span class="ml-2 text-sm text-gray-600">Chọn tất cả</span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Books Content -->
        <div id="books-container" class="p-6">
            @{
                ViewBag.ViewMode = Model.ViewMode ?? "grid";
            }
            
            @if (Model.ViewMode == "list")
            {
                <!-- List View -->
                <div class="space-y-3" id="books-list-view">
                    @foreach (var book in Model.Books)
                    {
                        <div class="flex items-center">
                            <input type="checkbox" name="selectedBooks" value="@book.Id" class="book-checkbox rounded border-gray-300 text-primary-600 focus:ring-primary-500 mr-4">
                            <div class="flex-1">
                                @Html.Partial("_BookCard", book)
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- Grid View -->
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="books-grid-view">
                    @foreach (var book in Model.Books)
                    {
                        <div class="relative">
                            <input type="checkbox" name="selectedBooks" value="@book.Id" class="book-checkbox absolute top-2 left-2 z-10 rounded border-gray-300 text-primary-600 focus:ring-primary-500 bg-white shadow-sm">
                            @Html.Partial("_BookCard", book)
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="px-6 py-4 bg-gray-50 border-t border-gray-200">
                <div class="flex items-center justify-between">
                    <div class="flex items-center text-sm text-gray-700">
                        <span>Hiển thị <span class="font-medium">@((Model.CurrentPage - 1) * Model.PageSize + 1)</span> đến <span class="font-medium">@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount)</span> trong tổng số <span class="font-medium">@Model.TotalCount</span> kết quả</span>
                    </div>
                    
                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                        @if (Model.CurrentPage > 1)
                        {
                            <a href="@Url.Action("Books", "Admin", new { 
                                page = Model.CurrentPage - 1, 
                                pageSize = Model.PageSize, 
                                searchTerm = Model.SearchTerm, 
                                categoryId = Model.CategoryId, 
                                sortBy = Model.SortBy,
                                minPrice = Model.MinPrice,
                                maxPrice = Model.MaxPrice,
                                viewMode = Model.ViewMode
                            })" 
                               class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        }

                        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                        {
                            @if (i == Model.CurrentPage)
                            {
                                <span class="relative inline-flex items-center px-4 py-2 border border-primary-500 bg-primary-50 text-sm font-medium text-primary-600">
                                    @i
                                </span>
                            }
                            else
                            {
                                <a href="@Url.Action("Books", "Admin", new { 
                                    page = i, 
                                    pageSize = Model.PageSize, 
                                    searchTerm = Model.SearchTerm, 
                                    categoryId = Model.CategoryId, 
                                    sortBy = Model.SortBy,
                                    minPrice = Model.MinPrice,
                                    maxPrice = Model.MaxPrice,
                                    viewMode = Model.ViewMode
                                })" 
                                   class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                                    @i
                                </a>
                            }
                        }

                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <a href="@Url.Action("Books", "Admin", new { 
                                page = Model.CurrentPage + 1, 
                                pageSize = Model.PageSize, 
                                searchTerm = Model.SearchTerm, 
                                categoryId = Model.CategoryId, 
                                sortBy = Model.SortBy,
                                minPrice = Model.MinPrice,
                                maxPrice = Model.MaxPrice,
                                viewMode = Model.ViewMode
                            })" 
                               class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        }
                    </nav>
                </div>
            </div>
        }
    }
    else
    {
        <!-- Empty State -->
        <div class="text-center py-12">
            <div class="mx-auto h-24 w-24 text-gray-400 mb-4">
                <i class="fas fa-books text-6xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Không tìm thấy sách nào</h3>
            <p class="text-gray-500 mb-6">Không có sách nào phù hợp với tiêu chí tìm kiếm của bạn.</p>
            <div class="flex justify-center gap-3">
                <a href="@Url.Action("Books", "Admin")" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <i class="fas fa-refresh mr-2"></i>
                    Xem tất cả
                </a>
                <a href="@Url.Action("CreateBook", "Admin", new { area = "Admin" })" 
                   class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                    <i class="fas fa-plus mr-2"></i>
                    Thêm sách đầu tiên
                </a>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                <i class="fas fa-exclamation-triangle text-red-600 text-xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Xác nhận xóa sách</h3>
            <div class="mt-2 px-7 py-3">
                <p class="text-sm text-gray-500 mb-4">
                    Bạn có chắc chắn muốn xóa sách "<span id="bookTitle" class="font-medium"></span>"? 
                    Hành động này không thể hoàn tác.
                </p>
            </div>
            <div class="flex justify-center gap-3">
                <button id="cancelDelete" type="button" 
                        class="px-4 py-2 bg-white text-gray-500 border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-300">
                    Hủy
                </button>
                <button id="confirmDelete" type="button" 
                        class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
                    <i class="fas fa-trash-alt mr-2"></i>
                    Xóa sách
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let bookToDelete = null;

        // BookCard admin interaction functions
        function viewBookDetails(bookId) {
            // Create a modal or redirect to details page
            // For now, we'll use a simple modal approach
            fetch(`/admin/books/details/${bookId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Book not found');
                    }
                    return response.text();
                })
                .then(html => {
                    // Show modal with book details
                    showBookDetailsModal(html);
                })
                .catch(error => {
                    // Fallback: open in new tab or redirect
                    window.open(`/book/details/${bookId}`, '_blank');
                });
        }

        function showBookDetailsModal(htmlContent) {
            // Create modal
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
            modal.innerHTML = `
                <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-bold text-gray-900">Chi tiết sách</h3>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                    <div class="max-h-96 overflow-y-auto">
                        ${htmlContent}
                    </div>
                    <div class="flex justify-end mt-4 pt-4 border-t">
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
                            Đóng
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Close on click outside
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    this.remove();
                }
            });
        }

        // Cancel delete
        document.getElementById('cancelDelete').addEventListener('click', function() {
            document.getElementById('deleteModal').classList.add('hidden');
            bookToDelete = null;
        });

        // Enhanced delete confirmation with proper routing
        function confirmDelete(bookId, bookTitle) {
            bookToDelete = bookId;
            document.getElementById('bookTitle').textContent = bookTitle;
            document.getElementById('deleteModal').classList.remove('hidden');
        }

        // Confirm delete with proper API call
        document.getElementById('confirmDelete').addEventListener('click', function() {
            if (bookToDelete) {
                // Show loading
                this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Đang xóa...';
                this.disabled = true;
                
                // Perform delete using the correct route from AdminController
                fetch(`/admin/books/delete/${bookToDelete}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Sách đã được xóa thành công!', 'success');
                        // Remove the book card from view or reload page
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        showNotification(data.message || 'Có lỗi xảy ra khi xóa sách!', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Có lỗi xảy ra khi xóa sách!', 'error');
                })
                .finally(() => {
                    document.getElementById('deleteModal').classList.add('hidden');
                    this.innerHTML = '<i class="fas fa-trash-alt mr-2"></i>Xóa sách';
                    this.disabled = false;
                    bookToDelete = null;
                });
            }
        });

        // Select all functionality
        document.getElementById('select-all').addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.book-checkbox');
            checkboxes.forEach(cb => cb.checked = this.checked);
            updateBulkActionButton();
        });

        document.getElementById('select-all-header').addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.book-checkbox');
            checkboxes.forEach(cb => cb.checked = this.checked);
            updateBulkActionButton();
        });

        // Individual checkbox change
        document.querySelectorAll('.book-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateBulkActionButton);
        });

        function updateBulkActionButton() {
            const selected = document.querySelectorAll('.book-checkbox:checked').length;
            const bulkButton = document.getElementById('bulk-action-btn');
            
            if (selected > 0) {
                bulkButton.classList.remove('hidden');
                bulkButton.textContent = `Thao tác (${selected})`;
            } else {
                bulkButton.classList.add('hidden');
            }
        }

        // Close modal on click outside
        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.add('hidden');
                bookToDelete = null;
            }
        });

        // Notification function
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 max-w-sm w-full bg-white border rounded-lg shadow-lg transform transition-all duration-300 ${
                type === 'success' ? 'border-green-200' : 
                type === 'error' ? 'border-red-200' : 'border-blue-200'
            }`;
            
            notification.innerHTML = `
                <div class="p-4">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <i class="fas ${
                                type === 'success' ? 'fa-check-circle text-green-400' : 
                                type === 'error' ? 'fa-times-circle text-red-400' : 'fa-info-circle text-blue-400'
                            }"></i>
                        </div>
                        <div class="ml-3 w-0 flex-1 pt-0.5">
                            <p class="text-sm font-medium text-gray-900">${message}</p>
                        </div>
                        <div class="ml-4 flex-shrink-0 flex">
                            <button class="inline-flex text-gray-400 hover:text-gray-500" onclick="this.parentElement.parentElement.parentElement.parentElement.remove()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // BookCard interaction functions (for user context)
        function quickView(bookId) {
            // Open quick view modal for book
            console.log('Quick view for book:', bookId);
            // Implementation would open a modal with book details
        }

        function addToWishlist(bookId) {
            // Add book to wishlist
            fetch(`/api/wishlist/add/${bookId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Đã thêm vào danh sách yêu thích!', 'success');
                } else {
                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Có lỗi xảy ra!', 'error');
            });
        }

        function addToCart(bookId) {
            // Add book to cart
            fetch(`/api/cart/add/${bookId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Đã thêm vào giỏ hàng!', 'success');
                    // Update cart counter if exists
                    updateCartCounter();
                } else {
                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Có lỗi xảy ra!', 'error');
            });
        }

        function updateCartCounter() {
            // Update cart counter in header
            fetch('/api/cart/count')
            .then(response => response.json())
            .then(data => {
                const cartCounter = document.querySelector('#cart-counter');
                if (cartCounter && data.count !== undefined) {
                    cartCounter.textContent = data.count;
                    if (data.count > 0) {
                        cartCounter.classList.remove('hidden');
                    }
                }
            })
            .catch(error => console.error('Error updating cart counter:', error));
        }

         function switchViewMode(mode) {
        const url = new URL(window.location.href);

        // Cập nhật hoặc thêm query param "viewMode"
        url.searchParams.set("viewMode", mode);

        // Giữ nguyên các filter hiện tại (search, category, sort, pageSize, pageIndex...)
        window.location.href = url.toString();
    }
    </script>
}