@model BookStoreMVC.Models.ViewModels.BookDetailsViewModel

@{
    ViewData["Title"] = Model.Book.Title;
}

@section Meta {
    <meta name="description" content="@Model.Book.Description" />
    <meta property="og:title" content="@Model.Book.Title" />
    <meta property="og:description" content="@Model.Book.Description" />
    <meta property="og:image" content="@Model.Book.ImageUrl" />
}

@section Styles {
    <style>
        .book-image {
            max-width: 400px;
            height: auto;
        }
        .rating-stars {
            font-size: 1.2rem;
        }
        .review-card {
            background: #f9fafb;
            border-left: 4px solid #3b82f6;
        }
        .sticky-sidebar {
            position: sticky;
            top: 2rem;
        }
    </style>
}

<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <!-- Book Image -->
    <div class="lg:col-span-1">
        <div class="sticky-sidebar">
            <img src="@(Model.Book.ImageUrl ?? "/images/no-book-cover.png")" 
                 alt="@Model.Book.Title" 
                 class="book-image w-full rounded-lg shadow-lg" />
            
            <!-- Quick Actions -->
            <div class="mt-6 space-y-3">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <!-- Add to Cart -->
                    @if (Model.Book.InStock)
                    {
                        <div class="flex items-center space-x-2">
                            <button onclick="updateQuantity(-1)" 
                                    class="w-10 h-10 bg-gray-200 hover:bg-gray-300 rounded-lg flex items-center justify-center transition-colors">
                                <i class="fas fa-minus"></i>
                            </button>
                            <input type="number" id="quantity" value="@(Model.CartQuantity > 0 ? Model.CartQuantity : 1)" 
                                   min="1" max="@Math.Min(Model.Book.StockQuantity, 10)" 
                                   class="w-16 text-center border border-gray-300 rounded-lg py-2" />
                            <button onclick="updateQuantity(1)" 
                                    class="w-10 h-10 bg-gray-200 hover:bg-gray-300 rounded-lg flex items-center justify-center transition-colors">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        
                        <button onclick="addToCart()" 
                                class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors">
                            <i class="fas fa-shopping-cart mr-2"></i>
                            @(Model.CartQuantity > 0 ? "Cập nhật giỏ hàng" : "Thêm vào giỏ hàng")
                        </button>
                    }
                    else
                    {
                        <button disabled 
                                class="w-full bg-gray-400 text-white py-3 px-4 rounded-lg font-semibold cursor-not-allowed">
                            <i class="fas fa-times mr-2"></i>
                            Hết hàng
                        </button>
                    }

                    <!-- Add to Wishlist -->
                    <button onclick="toggleWishlist(@Model.Book.Id)" 
                            class="w-full border-2 border-red-500 text-red-500 hover:bg-red-500 hover:text-white py-3 px-4 rounded-lg font-semibold transition-colors">
                        <i class="@(Model.IsInWishlist ? "fas" : "far") fa-heart mr-2" id="wishlist-icon"></i>
                        <span id="wishlist-text">@(Model.IsInWishlist ? "Bỏ yêu thích" : "Yêu thích")</span>
                    </button>
                }
                else
                {
                    <!-- Login Required -->
                    <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Context.Request.Path" 
                       class="block w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-semibold text-center transition-colors">
                        <i class="fas fa-sign-in-alt mr-2"></i>
                        Đăng nhập để mua hàng
                    </a>
                }
            </div>

            <!-- Book Stats -->
            <div class="mt-6 bg-gray-50 p-4 rounded-lg">
                <h3 class="font-semibold text-gray-800 mb-3">Thông tin</h3>
                <div class="space-y-2 text-sm">
                    <div class="flex justify-between">
                        <span class="text-gray-600">Tồn kho:</span>
                        <span class="@(Model.Book.InStock ? "text-green-600" : "text-red-600") font-semibold">
                            @(Model.Book.InStock ? $"{Model.Book.StockQuantity} cuốn" : "Hết hàng")
                        </span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Đánh giá:</span>
                        <span class="text-gray-800">@Model.Book.ReviewCount lượt</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Danh mục:</span>
                        <a asp-controller="Books" asp-action="Category" asp-route-id="@Model.Book.Category?.Id" 
                           class="text-blue-600 hover:text-blue-800">
                            @Model.Book.Category?.Name
                        </a>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Ngôn ngữ:</span>
                        <span class="text-gray-800">@(Model.Book.Language ?? "Tiếng Việt")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Book Details -->
    <div class="lg:col-span-2">
        <!-- Title and Basic Info -->
        <div class="mb-6">
            <h1 class="text-3xl font-bold text-gray-800 mb-2">@Model.Book.Title</h1>
            <p class="text-xl text-gray-600 mb-4">bởi <span class="font-semibold">@Model.Book.Author</span></p>
            
            <!-- Rating -->
            <div class="flex items-center mb-4">
                <div class="flex rating-stars text-yellow-500 mr-3">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <i class="fas fa-star @(i <= Model.Book.AverageRating ? "text-yellow-500" : "text-gray-300")"></i>
                    }
                </div>
                <span class="text-gray-600">
                    @Model.Book.AverageRating.ToString("F1") sao (@Model.Book.ReviewCount đánh giá)
                </span>
            </div>

            <!-- Price -->
            <div class="mb-6">
                @if (Model.Book.DiscountPrice.HasValue && Model.Book.DiscountPrice < Model.Book.Price)
                {
                    <div class="flex items-center space-x-3">
                        <span class="text-3xl font-bold text-red-600">@Model.Book.DiscountPrice.Value.ToString("C0")</span>
                        <span class="text-xl text-gray-500 line-through">@Model.Book.Price.ToString("C0")</span>
                        <span class="bg-red-100 text-red-800 px-2 py-1 rounded-full text-sm font-semibold">
                            Giảm @(((Model.Book.Price - Model.Book.DiscountPrice.Value) / Model.Book.Price * 100))%
                        </span>
                    </div>
                }
                else
                {
                    <span class="text-3xl font-bold text-blue-600">@Model.Book.DisplayPrice.ToString("C0")</span>
                }
            </div>
        </div>

        <!-- Book Description -->
        @if (!string.IsNullOrEmpty(Model.Book.Description))
        {
            <div class="mb-8">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Mô tả</h2>
                <div class="prose max-w-none text-gray-700 leading-relaxed">
                    @Html.Raw(Model.Book.Description.Replace("\n", "<br>"))
                </div>
            </div>
        }

        <!-- Book Details Table -->
        <div class="mb-8">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">Chi tiết sản phẩm</h2>
            <div class="bg-gray-50 p-6 rounded-lg">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <span class="block text-sm text-gray-600 mb-1">Tác giả</span>
                        <span class="font-semibold">@Model.Book.Author</span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Book.Publisher))
                    {
                        <div>
                            <span class="block text-sm text-gray-600 mb-1">Nhà xuất bản</span>
                            <span class="font-semibold">@Model.Book.Publisher</span>
                        </div>
                    }
                    @if (Model.Book.PublishDate.HasValue)
                    {
                        <div>
                            <span class="block text-sm text-gray-600 mb-1">Ngày xuất bản</span>
                            <span class="font-semibold">@Model.Book.PublishDate.Value.ToString("dd/MM/yyyy")</span>
                        </div>
                    }
                    @* @if (!string.IsNullOrEmpty(Model.Book.ISBN))
                    {
                        <div>
                            <span class="block text-sm text-gray-600 mb-1">ISBN</span>
                            <span class="font-semibold">@Model.Book.ISBN</span>
                        </div>
                    } *@
                    @if (Model.Book.PageCount > 0)
                    {
                        <div>
                            <span class="block text-sm text-gray-600 mb-1">Số trang</span>
                            <span class="font-semibold">@Model.Book.PageCount trang</span>
                        </div>
                    }
                    <div>
                        <span class="block text-sm text-gray-600 mb-1">Ngôn ngữ</span>
                        <span class="font-semibold">@(Model.Book.Language ?? "Tiếng Việt")</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Reviews Section -->
        <div class="mb-8">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-semibold text-gray-800">Đánh giá từ khách hàng</h2>
                @if (User.Identity?.IsAuthenticated == true && Model.CanReview)
                {
                    <a asp-controller="Reviews" asp-action="Create" asp-route-bookId="@Model.Book.Id" 
                       class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-semibold transition-colors">
                        <i class="fas fa-edit mr-2"></i>
                        Viết đánh giá
                    </a>
                }
            </div>

            @if (Model.Book.Reviews?.Any() == true)
            {
                <div class="space-y-4">
                    @foreach (var review in Model.Book.Reviews.Take(5))
                    {
                        <div class="review-card p-6 rounded-lg">
                            <div class="flex justify-between items-start mb-3">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                                        <i class="fas fa-user text-white"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-semibold text-gray-800">@review.User.Name</h4>
                                        <div class="flex items-center space-x-2">
                                            <div class="flex">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= review.Rating ? "text-yellow-500" : "text-gray-300") text-sm"></i>
                                                }
                                            </div>
                                            <span class="text-sm text-gray-600">@review.CreatedAt.ToString("dd/MM/yyyy")</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <p class="text-gray-700 leading-relaxed">@review.Comment</p>
                        </div>
                    }
                </div>

                @if (Model.Book.ReviewCount > 5)
                {
                    <div class="text-center mt-6">
                        <a asp-controller="Reviews" asp-action="Index" asp-route-bookId="@Model.Book.Id" 
                           class="text-blue-600 hover:text-blue-800 font-semibold">
                            Xem tất cả @Model.Book.ReviewCount đánh giá <i class="fas fa-arrow-right ml-1"></i>
                        </a>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-8 bg-gray-50 rounded-lg">
                    <i class="fas fa-comments text-4xl text-gray-400 mb-4"></i>
                    <h3 class="text-lg font-semibold text-gray-800 mb-2">Chưa có đánh giá nào</h3>
                    <p class="text-gray-600">Hãy là người đầu tiên đánh giá cuốn sách này</p>
                    @if (User.Identity?.IsAuthenticated == true && Model.CanReview)
                    {
                        <a asp-controller="Reviews" asp-action="Create" asp-route-bookId="@Model.Book.Id" 
                           class="inline-block mt-4 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
                            Viết đánh giá đầu tiên
                        </a>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Related Books Section -->
@if (Model.RelatedBooks?.Any() == true)
{
    <div class="mt-12">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Sách liên quan</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            @foreach (var book in Model.RelatedBooks.Take(4))
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                    <a asp-action="Details" asp-route-id="@book.Id">
                        <img src="@(book.ImageUrl ?? "/images/no-book-cover.png")" 
                             alt="@book.Title" 
                             class="w-full h-48 object-cover" />
                    </a>
                    <div class="p-4">
                        <h3 class="font-semibold text-gray-800 mb-2 line-clamp-2">
                            <a asp-action="Details" asp-route-id="@book.Id" class="hover:text-blue-600 transition-colors">
                                @book.Title
                            </a>
                        </h3>
                        <p class="text-gray-600 text-sm mb-2">@book.Author</p>
                        <div class="flex items-center mb-2">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="fas fa-star @(i <= book.AverageRating ? "text-yellow-500" : "text-gray-300") text-sm"></i>
                            }
                            <span class="text-gray-600 text-sm ml-2">(@book.ReviewCount)</span>
                        </div>
                        <div class="text-lg font-bold text-blue-600">
                            @book.DisplayPrice.ToString("C0")
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@section Scripts {
    <script>
        function updateQuantity(change) {
            const quantityInput = document.getElementById('quantity');
            let currentValue = parseInt(quantityInput.value);
            let newValue = currentValue + change;
            
            const min = parseInt(quantityInput.getAttribute('min'));
            const max = parseInt(quantityInput.getAttribute('max'));
            
            if (newValue >= min && newValue <= max) {
                quantityInput.value = newValue;
            }
        }

        function addToCart() {
            const quantity = parseInt(document.getElementById('quantity').value);
            const bookId = @Model.Book.Id;
            
            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({
                    bookId: bookId,
                    quantity: quantity
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Đã cập nhật giỏ hàng!', 'success');
                    updateCartCount(data.cartItemCount);
                    
                    // Update button text
                    const button = document.querySelector('button[onclick="addToCart()"]');
                    if (button) {
                        button.innerHTML = '<i class="fas fa-shopping-cart mr-2"></i>Cập nhật giỏ hàng';
                    }
                } else {
                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Có lỗi xảy ra!', 'error');
            });
        }

        function toggleWishlist(bookId) {
            const icon = document.getElementById('wishlist-icon');
            const text = document.getElementById('wishlist-text');
            const isInWishlist = icon.classList.contains('fas');
            
            fetch('/Wishlist/ToggleWishlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({
                    bookId: bookId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (isInWishlist) {
                        icon.classList.remove('fas');
                        icon.classList.add('far');
                        text.textContent = 'Yêu thích';
                        showNotification('Đã xóa khỏi danh sách yêu thích!', 'info');
                    } else {
                        icon.classList.remove('far');
                        icon.classList.add('fas');
                        text.textContent = 'Bỏ yêu thích';
                        showNotification('Đã thêm vào danh sách yêu thích!', 'success');
                    }
                } else {
                    showNotification(data.message || 'Có lỗi xảy ra!', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Có lỗi xảy ra!', 'error');
            });
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${
                type === 'success' ? 'bg-green-500' :
                type === 'error' ? 'bg-red-500' :
                type === 'info' ? 'bg-blue-500' : 'bg-gray-500'
            }`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        function updateCartCount(count) {
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(element => {
                element.textContent = count;
            });
        }
    </script>
}